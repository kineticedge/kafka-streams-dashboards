plugins {
    id 'idea'
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://packages.confluent.io/maven/"
        }
    }
}

subprojects {
    version = '1.0'
}

configure(subprojects.findAll { project -> file("${project.name}/src/main/java").exists() }) {

    apply plugin: 'java'
    apply plugin: 'application'
    apply plugin: 'eclipse'

    group = 'io.kineticedge.ksd'
    description = "${project.name}"

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    dependencies {
        implementation group: 'ch.qos.logback', name: 'logback-classic', version: logback_version
        implementation group: 'com.beust', name: 'jcommander', version: jcommander_version
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jackson_version
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jackson_version
        implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jackson_version
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: apache_commons_version
        implementation(group: 'org.apache.kafka', name: 'kafka-clients', version: kafka_version) {
            version {
                strictly kafka_version
            }
        }

        //implementation group: 'io.confluent', name: 'monitoring-interceptors', version: confluent_version

        implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4j_version

        // lombok dependencies
        compileOnly group: 'org.projectlombok', name: 'lombok', version: lombok_version
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombok_version

        testCompileOnly group: 'org.projectlombok', name: 'lombok', version: lombok_version
        testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombok_version
    }

    test {
        useJUnitPlatform()
    }

    // no reason to build both .tar and .zip application distributions, disable zip
    tasks.getByName("distZip").enabled = false

    // make this part of the docker image.
    distTar {
        exclude 'rocksdbjni-*.jar'
        exclude 'zstd-jni-*.jar'
        exclude 'lz4-java-*.jar'
        exclude 'snappy-java-*.jar'
        exclude 'jackson-annotations-*.jar'
        exclude 'jackson-core-*.jar'
        exclude 'jackson-databind-*.jar'
        exclude 'kafka-clients-*.jar'
        exclude 'kafka-streams-*.jar'
    }

}

configure(subprojects.findAll { project -> file("${project.name}/run.sh").exists() }) {

    // creates a shell file that can set the java class-path for integration tests.
    ext.createIntegrationClasspath = { scriptName ->
        def cp = sourceSets.main.runtimeClasspath.collect { "export CP=\"\${CP}:${it}\"" }.join("\n")
        def file = new File(projectDir, scriptName)
        file.text = 'export CP=""\n' + cp + '\n'
        file.setExecutable(true)
    }

    task postBuildScript() {
        doLast {
            createIntegrationClasspath('./.classpath.sh')
        }
    }
    build.finalizedBy postBuildScript
}
