networks:
  default:
    external: true
    name: ksd

volumes:
  ct0: {}
  bk1: {}
  bk2: {}
  bk3: {}
  bk4: {}

services:

  # tracing collector agent
  broker-otel:
    image: otel/opentelemetry-collector:0.122.0
    container_name: ${COMPOSE_PROJECT_NAME}-broker-otel
    hostname: broker-otel
    healthcheck:
      # not a true health check, container public.ecr.aws/aws-observability/aws-otel-collector has /healthcheck
      # would be nice if otel incorporated this into their container.
      test: [ "CMD", "/otelcol", "components" ]
      #test: [ "CMD", "/healthcheck" ]
      interval: 5s
      timeout: 5s
      retries: 3
    #command: ["--config=/otelcol.yaml"]
    ports:
      - '9091:9091'
    volumes:
      - ./otelcol/config.yaml:/etc/otelcol/config.yaml


  controller-0:
    image: ${IMAGE}:${VERSION}
    hostname: controller-0
    container_name: ${COMPOSE_PROJECT_NAME}-controller-0
    stop_grace_period: 120s
    healthcheck:
      test: nc -z localhost 9093 || exit 1
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - ct0:/var/lib/kafka/data
      - ./jmx_prometheus:/opt/jmx_prometheus
      - ./secrets:/etc/kafka/secrets
    environment:
      CLUSTER_ID: "0000000000000000000000"
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_PROCESS_ROLES: controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 0@controller-0:9093
      KAFKA_NODE_ID: 0
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      #KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml -javaagent:/opt/jmx_prometheus/jolokia-jvm.jar=port=7072,host=*
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml
#      KAFKA_METRIC_REPORTER: io.kineticedge.ksd.metrics.reporter.ClientOtlpMetricsReporter
#      OTEL_EXPORTER_OTLP_ENDPOINT: 127.0.0.1:4317

  broker-1:
    image: ${IMAGE}:${VERSION}
    hostname: broker-1
    container_name: ${COMPOSE_PROJECT_NAME}-broker-1
    stop_grace_period: 120s
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      controller-0:
        condition: service_healthy
    ports:
      - '19092:19092'
      # let this broker act as the load-balancer discovery of the cluster.
      - '9092:19092'
      - '17071:7071'
    volumes:
      - bk1:/var/lib/kafka/data
      - ./jmx_prometheus:/opt/jmx_prometheus
      - ./secrets:/etc/kafka/secrets
      - ./metrics-reporter-1.0-all.jar:/opt/kafka/libs/metrics-reporter.jar
    environment:
      CLUSTER_ID: "0000000000000000000000"
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_SECURITY_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-1:9092,PLAINTEXT_HOST://localhost:19092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 0@controller-0:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 4
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 500
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml -javaagent:/opt/jmx_prometheus/jolokia-jvm.jar=port=7072,host=*
      KAFKA_AUTO_INCLUDE_JMX_REPORTER: 'false'
      #Clients have a MetricsReporter.class while the broker has a KafkaMetricsReporter.class.
      KAFKA_METRIC_REPORTERS: org.apache.kafka.common.metrics.JmxReporter,io.kineticedge.ksd.metrics.reporter.ClientTelemetryMetricsReporter
      KAFKA_METRIC_REPORTERS_CLIENTTELEMETRY_ENDPOINT: broker-otel:4317

  broker-2:
    image: ${IMAGE}:${VERSION}
    hostname: broker-2
    container_name: ${COMPOSE_PROJECT_NAME}-broker-2
    stop_grace_period: 120s
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      controller-0:
        condition: service_healthy
    ports:
      - '29092:29092'
    volumes:
      - bk2:/var/lib/kafka/data
      - ./jmx_prometheus:/opt/jmx_prometheus
      - ./secrets:/etc/kafka/secrets
      - ./metrics-reporter-1.0-all.jar:/opt/kafka/libs/metrics-reporter.jar
    environment:
      CLUSTER_ID: "0000000000000000000000"
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_SECURITY_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-2:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 0@controller-0:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 4
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 500
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml -javaagent:/opt/jmx_prometheus/jolokia-jvm.jar=port=7072,host=*
      KAFKA_AUTO_INCLUDE_JMX_REPORTER: 'false'
      KAFKA_METRIC_REPORTERS: org.apache.kafka.common.metrics.JmxReporter,io.kineticedge.ksd.metrics.reporter.ClientTelemetryMetricsReporter
      KAFKA_METRIC_REPORTERS_CLIENTTELEMETRY_ENDPOINT: broker-otel:4317

  broker-3:
    image: ${IMAGE}:${VERSION}
    hostname: broker-3
    container_name: ${COMPOSE_PROJECT_NAME}-broker-3
    stop_grace_period: 120s
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      controller-0:
        condition: service_healthy
    ports:
      - '39092:39092'
    volumes:
      - bk3:/var/lib/kafka/data
      - ./jmx_prometheus:/opt/jmx_prometheus
      - ./secrets:/etc/kafka/secrets
      - ./metrics-reporter-1.0-all.jar:/opt/kafka/libs/metrics-reporter.jar
    environment:
      CLUSTER_ID: "0000000000000000000000"
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_SECURITY_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-3:9092,PLAINTEXT_HOST://localhost:39092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 0@controller-0:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 4
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 500
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml -javaagent:/opt/jmx_prometheus/jolokia-jvm.jar=port=7072,host=*
      KAFKA_AUTO_INCLUDE_JMX_REPORTER: 'false'
      KAFKA_METRIC_REPORTERS: org.apache.kafka.common.metrics.JmxReporter,io.kineticedge.ksd.metrics.reporter.ClientTelemetryMetricsReporter
      KAFKA_METRIC_REPORTERS_CLIENTTELEMETRY_ENDPOINT: broker-otel:4317

  kafka-exporter:
    hostname: kafka-exporter
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    healthcheck:
      test: wget --spider http://localhost:9308/ || exit 1
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      broker-1:
        condition: service_healthy
      broker-2:
        condition: service_healthy
      broker-3:
        condition: service_healthy
    ports:
      - "9308:9308"
    command: --kafka.server=broker-1:9092 --kafka.server=broker-2:9092 --kafka.server=broker-3:9092

#  diag-container:
#    image: busybox
#    depends_on:
#      - broker-otel
#    entrypoint: "sh -c 'while true; do sleep 30; done'"
#    network_mode: "service:broker-otel"

